
docker exec -it 423 bash
 
mysql -uroot -proot

show databases 

Editor does not contain a main type  -------------> In Eclipse, make sure you add your source folder in the project properties -> java build path -> source. Otherwise, the main() function may not be included in your project.


netstat -ano | findstr 8080
taskkill /F /pid 1088


docker
compose.yaml
services:
  postgres:
    image: 'postgres'
    environment:
      - 'POSTGRES_DB=postgres'
      - 'POSTGRES_PASSWORD=1234'
      - 'POSTGRES_USER=postgres'
    ports:
      - '5432:5432'


spring:
  
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
    username : xxx
    password : xxx
  jpa:
    hibernate:
      ddl-auto: update
  cache:
    type: simple


spring:
  jpa:
    hibernate:
      ddl-auto: validate
  datasource:
    password: 1234
    username: postgres
    url: jdbc:postgresql://localhost:5432/postgres
	
	

psql -V
initdb -D B:\Java091024\pgsql\data -U postgres -E utf8
pg_ctl -D B:\Java091024\pgsql\data -l logfile start
CREATE DATABASE school;
pg_ctl -D D:\PostgreSQL\pgsql\data -l logfile stop


spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=1234
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


C:\Program Files\RabbitMQ Server\rabbitmq_server-3.11.11\sbin>
rabbitmq-plugins enable rabbitmq_management

Il existe une autre solution pour résoudre le souci si le message d'erreur persiste à s'afficher. 
Rendez-vous dans le dossier "C:\Users\votre-utilisauteur\AppData\Roamins\npm" puis supprimez le fichier "ng.ps1". 
Ce fichier n'est plus nécessaire pour le framework Angular et il rentre en conflit avec Windows.
Il va falloir nettoyer également le cache de npm en vidant le dossier "C:\Users\votre-utilisateur\AppData\Roaming\npm-cache".


spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/customer-service
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.sql.init.mode=always
spring.jpa.show-sql=true
spring.datasource.username=root
spring.datasource.password=
    
#keycloak.realm= microservices-realm
#keycloak.auth-server-url= http://localhost:8180/
#keycloak.resource= controle-jee-client
##keycloak.public-client= false
##keycloak.principal-attribute= name
#keycloak.bearer-only=true
#keycloak.cors=true
	
#management.endpoints.web.exposure.include=*
#server.port=0  



spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/inventory-service
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.sql.init.mode=always
spring.jpa.show-sql=true
spring.datasource.username=root
spring.datasource.password=
    
keycloak.realm= microservices-realm
keycloak.auth-server-url= http://localhost:8180/
keycloak.resource= controle-jee-client
#keycloak.public-client= false
##keycloak.principal-attribute= name
keycloak.bearer-only=true
#keycloak.cors=true
	
#management.endpoints.web.exposure.include=*
#server.port=0  



spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-serviceb?serverTimezone=UTC
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=create
spring.sql.init.mode=always
spring.jpa.show-sql=true
spring.datasource.username=root
spring.datasource.password=
    
keycloak.realm= microservices-realm
keycloak.auth-server-url= http://localhost:8180/
keycloak.resource= controle-jee-client
#keycloak.public-client= false
##keycloak.principal-attribute= name
keycloak.bearer-only=true
#keycloak.cors=true
	
#management.endpoints.web.exposure.include=*
#server.port=0  


logging.level.com.hamch.orderserviceb.services.CustomerRestClientService=debug
logging.level.com.hamch.orderserviceb.services.InventoryRestClientService=debug
feign.client.config.default.loggerLevel=full



spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/product-serviceb
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.sql.init.mode=always
spring.jpa.show-sql=true
spring.datasource.username=root
spring.datasource.password=
    
###keycloak.realm= microservices-realm
###keycloak.auth-server-url= http://localhost:8180/
###keycloak.resource= controle-jee-client
#keycloak.public-client= false
##keycloak.principal-attribute= name
###keycloak.bearer-only=true
#keycloak.cors=true
	
#management.endpoints.web.exposure.include=*
#server.port=0  








npm install keycloak-angular keycloak-js

./kc.sh start-dev --http-port=8180

kc.bat start-dev --http-port=8180

ipconfig
consul agent -server -bootstrap-expect=1 -data-dir=consul-data -ui -bind=192.168.0.181
consul services deregister -id inventory-service

data:

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-serviceb?serverTimezone=UTC
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.sql.init.mode=always
spring.jpa.show-sql=true
spring.datasource.username=root
spring.datasource.password=
    
keycloak.realm= microservices-realm
keycloak.auth-server-url= http://localhost:8180/
keycloak.resource= controle-jee-client
#keycloak.public-client= false
##keycloak.principal-attribute= name
keycloak.bearer-only=true
#keycloak.cors=true
	
#management.endpoints.web.exposure.include=*
#server.port=0  




spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/inventory-servicennnn
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.sql.init.mode=always
spring.jpa.show-sql=true


my.customer.params.x=11111
my.customer.params.y=66666
my.management.endpoints.web.exposure.include=*
my.spring.datasource.url=jdbc:h2:mem:customer-db
my.spring.h2.console.enabled= true

vault.exe
vault server -dev
 set VAULT_ADDR=http://127.0.0.1:8200

$ vault kv put secret/inventory-service @inventory-service-credentials.json
$ vault kv get secret/product-serviceb

curl -sSL https://zipkin.io/quickstart.sh | bash -s
java -jar zipkin.jar

java -jar zipkin.jar

elasticsearch.bat
logstash.bat -f logstash-samlpe.conf
logstash -f D:\IntellijProject\ELK\logstash-8.4.3\config\logstash-sample.conf
elasticsearch.bat

elasticsearch:   	xpack.security.enabled: false

					xpack.security.enrollment.enabled: false

npm install --save-dev


//    "@angular-devkit/build-angular": "~0.900.2",
    //"@angular/language-service": "~9.0.1",


npm i @angular/language-service

Valid redirect URIs: http://localhost:8080/login/oauth2/code/spring-cloud-gateway-client -> http://localhost:4200

./kc.sh build


Keycloak users:
testuser:1234
programming-techie:1234
admin:admin


./kc.sh build
keycloak
kc start-dev --http-port=8180

Keycloak users:
testuser:1234
programming-techie:1234
admin:admin

Kafka?
Testing?
Redis?
SSO google?
routes dynamiques
kubernates


GitHup cred:
abdellah2188:H@mch2188@


oauth2-authorization-code-demo-github

oauth2-autho-code-demo-google
ID du projet : abiding-octane-360711. Vous ne pourrez pas le modifier par la suite


Client id: 176959387329-6qatep9r3dejuf8vt8l99bq7jkg7f0c2.apps.googleusercontent.com
Client secret: GOCSPX-rxLcLnqs_7Qpc_27GCsWlAWX6rq